<?xml version="1.0"?>
<project name="java-junit-template-project" default="test" basedir="." 
         xmlns:artifact="antlib:org.apache.maven.artifact.ant">

    <property name="lib" value="lib"/>
    <property name="src-main" value="src"/>
    <property name="src-test" value="test"/>
    <property name="build" location="build" />
    <property name="build-main" value="build/main"/>
    <property name="build-test" value="build/test"/>
    <property name="build-jar" value="build/jar"/>
    <property name="dist" location="dist" />

    <path id="classpath.base">
        <pathelement location="lib/ganymed-ssh2-262.jar"/>
    </path>

    <path id="classpath.test">
        <pathelement location="lib/junit-4.11.jar"/>
        <pathelement location="lib/hamcrest-core-1.3.jar"/>
        <pathelement location="${build-main}"/>
        <path refid="classpath.base"/>
    </path>

    <target name="get-deps">
        <mkdir dir="${lib}"/>
        <get src="http://repo1.maven.org/maven2/junit/junit/4.11/junit-4.11.jar"
             dest="${lib}/junit-4.11.jar"
             usetimestamp="true"/>
        <get src="http://repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar"
             dest="${lib}/hamcrest-core-1.3.jar"
             usetimestamp="true"/>
        <get src="http://repo1.maven.org/maven2/ch/ethz/ganymed/ganymed-ssh2/262/ganymed-ssh2-262.jar"
             dest="${lib}/ganymed-ssh2-262.jar"
             usetimestamp="true"/>
    </target>

    <target name="clean" depends="get-deps">
        <delete>
            <fileset dir="${basedir}" includes="**/*.class"/>
            <fileset dir="${basedir}" includes="**/*.asc"/>
        </delete>
        <delete dir="${build}" />
        <delete dir="${dist}" />
        <echo message="clean done"/>
    </target>

    <target name="compile" depends="clean">
        <mkdir dir="${build-main}"/>
        <javac srcdir="${src-main}" destdir="${build-main}" debug="true" includeantruntime="false">
            <classpath refid="classpath.base"/>
        </javac>
    </target>

    <target name="compile-test" depends="compile">
        <mkdir dir="${build-test}"/>
        <javac srcdir="${src-test}" destdir="${build-test}" debug="true" includeantruntime="false">
            <classpath refid="classpath.test"/>
        </javac>
    </target>

    <target name="test" depends="compile-test">
        <junit printsummary="on" haltonfailure="yes">
            <classpath>
                <path refid="classpath.test"/>
                <pathelement location="${build-test}"/>
                <pathelement location="${src-test}/resources"/>
            </classpath>
            <formatter type="brief" usefile="false"/>
            <batchtest>
                <fileset dir="${src-test}" includes="**/*Test*.java"/>
            </batchtest>
        </junit>
    </target>

    <target name="jar" depends="test">
        <jar destfile="${build-jar}/JNC.jar" basedir="${build-main}"/>
        <!-- Build a jar file which includes the sourcce code -->
        <jar destfile="${build-jar}/JNC-sources.jar">
            <fileset dir="${build-main}" />
            <fileset dir="${src-main}" includes="**/*.java"/>
        </jar>
        <!-- Building a second copy of the jar for maven -->
        <jar destfile="${jar}" basedir="${build-main}"/>
    </target>

    <!-- ********* BEGIN MAVEN CENTRAL DEPLOYMENT SECTION ********** -->

    <!-- define Maven coordinates -->
    <property name="groupId" value="com.tailf" />
    <property name="artifactId" value="jnc" />
    <property name="version" value="1.0" />

    <!-- define artifacts' name, which follows the convention of Maven -->
    <property name="jar" value="${dist}/lib/${artifactId}-${version}.jar" />
    <property name="javadoc-jar" value="${dist}/lib/${artifactId}-${version}-javadoc.jar" />
    <property name="sources-jar" value="${dist}/lib/${artifactId}-${version}-sources.jar" />

    <!-- defined maven snapshots and staging repository id and url -->
    <property name="ossrh-snapshots-repository-url" 
              value="https://oss.sonatype.org/content/repositories/snapshots/" />
    <property name="ossrh-staging-repository-url" 
              value="https://oss.sonatype.org/service/local/staging/deploy/maven2/" />

    <!-- there server id in the Maven settings.xml -->
    <property name="ossrh-server-id" value="ossrh" />

    <!-- typedef to maven ant artifact -->
    <property name="maven-ant" value="${lib}/maven-ant-tasks-2.1.3.jar" />
    <path id="maven-ant-tasks.classpath" path="${maven-ant}" />
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
             uri="antlib:org.apache.maven.artifact.ant"
             classpathref="maven-ant-tasks.classpath" />

    <target name="setup-stage" description="get the maven ant artifact">
        <mkdir dir="${lib}"/>
        <get src="http://apache.mirrors.pair.com/maven/ant-tasks/2.1.3/binaries/maven-ant-tasks-2.1.3.jar"
             dest="${maven-ant}"
             usetimestamp="true"/>
    </target>
    
    <target name="dist" depends="jar" description="build javadoc and sources jar">
        <mkdir dir="${dist}/lib" />

        <!-- build the javadoc jar -->
        <javadoc sourcepath="${src-main}" destdir="${dist}/javadoc" />
        <jar jarfile="${javadoc-jar}">
          <fileset dir="${dist}/javadoc" />
        </jar>
    
        <!-- build the sources jar -->
        <jar jarfile="${sources-jar}">
          <fileset dir="${src-main}" />
        </jar>
    </target>

    <target name="deploy" depends="dist" description="deploy snapshot version to Maven snapshot repository">
        <fail message="file ${maven-ant} missing${line.separator}${line.separator}** Run 'ant setup-stage' to download it.">
            <condition>
                <not>
                    <available file="${maven-ant}" />
                </not>
            </condition>
        </fail>

        <artifact:mvn>
            <arg value="org.apache.maven.plugins:maven-deploy-plugin:2.6:deploy-file" />
            <arg value="-Durl=${ossrh-snapshots-repository-url}" />
            <arg value="-DrepositoryId=${ossrh-server-id}" />
            <arg value="-DpomFile=pom.xml" />
            <arg value="-Dfile=${jar}" />
        </artifact:mvn>
    </target>

    <!-- before this, update project version (both build.xml and pom.xml) from SNAPSHOT to RELEASE -->
    <target name="stage" depends="dist" description="deploy release version to Maven staging repository">
        <fail message="file ${maven-ant} missing${line.separator}${line.separator}** Run 'ant setup-stage' to download it.">
            <condition>
                <not>
                    <available file="${maven-ant}" />
                </not>
            </condition>
        </fail>

        <!-- sign and deploy the main artifact -->
        <artifact:mvn>
            <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
            <arg value="-Durl=${ossrh-staging-repository-url}" />
            <arg value="-DrepositoryId=${ossrh-server-id}" />
            <arg value="-DpomFile=pom.xml" />
            <arg value="-Dfile=${jar}" />
            <arg value="-Pgpg" />
        </artifact:mvn>

        <!-- sign and deploy the sources artifact -->
        <artifact:mvn>
            <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
            <arg value="-Durl=${ossrh-staging-repository-url}" />
            <arg value="-DrepositoryId=${ossrh-server-id}" />
            <arg value="-DpomFile=pom.xml" />
            <arg value="-Dfile=${sources-jar}" />
            <arg value="-Dclassifier=sources" />
            <arg value="-Pgpg" />
        </artifact:mvn>

        <!-- sign and deploy the javadoc artifact -->
        <artifact:mvn>
            <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
            <arg value="-Durl=${ossrh-staging-repository-url}" />
            <arg value="-DrepositoryId=${ossrh-server-id}" />
            <arg value="-DpomFile=pom.xml" />
            <arg value="-Dfile=${javadoc-jar}" />
            <arg value="-Dclassifier=javadoc" />
            <arg value="-Pgpg" />
        </artifact:mvn>
    </target>

</project>
